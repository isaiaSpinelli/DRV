# Laboratoire 2 DRV
Spinelli isaia
09.10.19

## Téléchargement du noyau Linux et ajout des modules pour le User-space I/O

Commandes :

**git clone https://github.com/altera-opensource/linux-socfpga.git**
**cd linux-socfpga**
**git checkout socfpga-4.14.130-ltsi**
configuration :
**make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- socfpga_defconfig**
architecure: arm tool chain : arm-linux-gnueabihf	board : socfpga_defconfig
Cela permet de compiler le noyau avec toutes les configurations correspendontes à notre matériel.

**grep UIO .config** permet de savoir si les userspace drivers sont actifs.
(UIO = Userspace I/O, vous trouvez l’howto officiel ici: https://www.kernel.org/doc/html/v4.14/driver-api/uio-howto.html).

Compilation avec **modification de la configuration.**
**make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- menuconfig**

/ UIO 	-> ajouter en module "Userspace I/O platform driver with generic IRQ handling"
/ LBDAF -> activer "Support for large (2TB+) block devices and files"
exit and save


Il faut ensuite **modifier le device tree** pour qu’on puisse gérer les boutons avec le UIO driver. (save l'ancoen .dts)
arch/arm/boot/dts/socfpga_cyclone5_sockit.dts-> ajouter :
drv-btn {
        compatible = "drv-btn";
        reg = <0xFF200000 0x1000>;
        interrupts = <0 41 1>;
        interrupt-parent = <&intc>;
};

On indique l'adresse du registre et sa taille ainsi que les numéros d'interruptions.

**compiler le noyau, les modules, et le device tree.**
![image](/img/cmd_compile_noyau_modules_dt.png)

Avertissement : le nom du répertoire source dans la dernière commande pourrait changer!! (ajout de sudo)

Ces commandes permettent de compiler le noyau, les modules et le device tree. Ensuite, copie les anciens fichiers pour les sauvgarder et place le nouveau noyau et dtb dans le dossier /var/lib/tftpboot/ afin de les deployer sur la carte. Finalement, place les modules précèdemment compilés dans /export/drv/.
